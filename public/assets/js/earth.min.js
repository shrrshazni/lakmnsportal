import *as e from "three"; import { DRACOLoader as n } from "three/addons/loaders/DRACOLoader.js"; import { OrbitControls as r } from "three/addons/controls/OrbitControls.js"; import { GLTFLoader as a } from "three/addons/loaders/GLTFLoader.js"; import { RGBELoader as t } from "three/addons/loaders/RGBELoader.js"; let canvasContainer = document.getElementById("myCanvas"), renderer = new e.WebGLRenderer({ alpha: !0 }); canvasContainer.appendChild(renderer.domElement), renderer.setSize(canvasContainer.clientWidth, canvasContainer.clientHeight); let scene = new e.Scene, camera = new e.PerspectiveCamera(45, canvasContainer.clientWidth / canvasContainer.clientHeight, .1, 1e3); camera.position.set(6, 6, 6); let orbit = new r(camera, renderer.domElement); orbit.enableZoom = !1, orbit.update(); let dracoLoader = new n; dracoLoader.setDecoderPath("/assets/js/draco/"), dracoLoader.preload(); let gltfLoader = new a; gltfLoader.setDRACOLoader(dracoLoader); let rgbeLoader = new t; renderer.outputEncoding = e.sRGBEncoding, renderer.toneMapping = e.ACESFilmicToneMapping, renderer.toneMappingExposure = 2; let item; function animate() { item && (item.rotation.y += .009), renderer.render(scene, camera), requestAnimationFrame(animate) } rgbeLoader.load("/assets/MR_INT-005_WhiteNeons_NAD.hdr", function (n) { n.mapping = e.EquirectangularReflectionMapping, scene.environment = n, gltfLoader.load("/models/others/scene.glb", function (n) { let r = n.scene; r.scale.set(.05, .05, .05); let a = new e.Box3().setFromObject(r), t = a.getCenter(new e.Vector3); camera.position.copy(t.clone().add(new e.Vector3(10, 0, 0))), camera.lookAt(t), scene.add(r), item = r }) }), animate(), window.addEventListener("resize", function () { camera.aspect = canvasContainer.clientWidth / canvasContainer.clientHeight, camera.updateProjectionMatrix(), renderer.setSize(canvasContainer.clientWidth, canvasContainer.clientHeight) });