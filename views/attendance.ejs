<%- include('partials/public-header') %>

<div class="mb-0 mt-3 p-4 h-100 overflow-hidden">

  <div class="row align-items-end justify-content-between p-lg-3 p-1 pb-0 g-3">

    <div class="col-6 col-md-auto">
      <div class="text-start">
        <% 
                            
        var currentDate = new Date();
            
        // Get the day of the week, day of the month, month, and year
        var dayOfWeek = currentDate.toLocaleDateString('en-US', { weekday: 'long' });
        var dayOfMonth = currentDate.toLocaleDateString('en-US', { day: '2-digit' });
        var month = currentDate.toLocaleDateString('en-US', { month: 'long' });
        var year = currentDate.toLocaleDateString('en-US', { year: 'numeric' });
            
        // Construct the formatted date string
        var formattedDate = dayOfMonth + " " + month + ", " + year;
            
        %>

        <h2 class="fs-5 fs-lg-4"><%= formattedDate %></h2>
      </div>
    </div>

    <div class="col-6 col-md-auto">
      <h2 class="text-end fs-5 fs-lg-4" id="currentTime"></h2>

      <script>
        function updateTime() {
          // Create a new Date object to get the current time
          var currentTime = new Date();

          // Get the hours, minutes, and seconds
          var hours = currentTime.getHours();
          var minutes = currentTime.getMinutes();
          var seconds = currentTime.getSeconds();

          // Add leading zeros if the numbers are less than 10
          hours = (hours < 10) ? '0' + hours : hours;
          minutes = (minutes < 10) ? '0' + minutes : minutes;
          seconds = (seconds < 10) ? '0' + seconds : seconds;

          // Construct the time string in HH:MM:SS format
          var timeString = hours + ':' + minutes + ':' + seconds;

          // Update the content of the <h3> element with the current time
          document.getElementById('currentTime').textContent = timeString + ' UTC +8';
        }

        // Call updateTime function initially to set the time immediately
        updateTime();

        // Update the time every second
        setInterval(updateTime, 1000);
      </script>
    </div>

  </div>

  <style>
    .qr-code-container {
      max-width: 100%;
      /* Ensure the container does not exceed the viewport width */
    }

    #qrCode {
      width: 100%;
      /* Initially set the image width to 100% */
      height: auto;
      /* Maintain aspect ratio */
    }

    /* Media queries for different viewport sizes */
    @media screen and (min-width: 768px) {
      #qrCode {
        width: 70%;
        /* Adjust the width for larger screens */
      }
    }

    @media screen and (min-width: 1024px) {
      #qrCode {
        width: 50%;
        /* Adjust the width for even larger screens */
      }
    }
  </style>

  <div class="mb-0 mt-n5">

    <div class="row gy-3 gx-6" style="min-height: 50vh;">

      <div class="col-md-6 mb-0 p-lg-5 p-3 pe-none">

        <div class="container rounded-5 border border-gray p-4 p-lg-6" style="background-color: #3874ff;">
          <div class="qr-code-container text-center p-1 p-lg-4 rounded-2 mb-10" style="background-color: #FFF;">
            <img id="qrCode" class="w-100 border border-light border-1">
          </div>

          <h1 class="text-center fst-italic fs-lg-3 fs-4" style="color: #FFF;">LAKMNS</h1>
        </div>

        <script>
          document.addEventListener('DOMContentLoaded', function() {
            let previousQRData = null;

            async function updateQRCode() {
              try {
                // Generate a new QR code
                const response = await fetch('/api/qrcode/generate');
                if (!response.ok) {
                  throw new Error('Network response was not ok');
                }
                const data = await response.json();

                // Update the src attribute of the QR code image
                document.getElementById('qrCode').src = data.qrCodeImage;

                // Save the previous QR code data
                if (previousQRData) {
                  await saveQRData(previousQRData);
                }

                // Update the previous QR data to the new one
                previousQRData = data.uniqueIdentifier;

                console.log('QR code updated successfully');
              } catch (error) {
                console.error('Error updating QR code:', error);
              }
            }

            updateQRCode();

            setInterval(updateQRCode, 15000);

            async function saveQRData(qrData) {
              try {
                // Perform any actions to save the QR code data here
                // console.log('Saving QR code data:', qrData);

                const response = await fetch('/api/qrcode/save-data', {
                  method: 'POST',
                  headers: {
                    'Content-Type': 'application/json'
                  },
                  body: JSON.stringify({
                    qrData: qrData
                  })
                });

                if (!response.ok) {
                  throw new Error('Network response was not ok');
                }

                // console.log('QR code data successfully saved');
              } catch (error) {
                console.error('Error saving QR code data:', error);
              }
            }

          });
        </script>

      </div>

      <div class="col-md-6 mt-n2 mt-lg-0 py-7 px-0">

        <div class="mb-3 row g-3" style="height: 100%;">

          <div class="scrollbar-overlay" style="height: 23.5vh;">
            <div id="attendance-container" class="px-3 py-2"></div>

            <script>
              function fetchDataAndPopulateContainer() {
                fetch('/api/all-attendance/today/all') // Fetch attendance data for today within a specific time range
                  .then(response => response.json())
                  .then(data => {
                    const container = document.getElementById('attendance-container');
                    container.innerHTML = ''; // Clear existing content

                    if (data.length === 0) {
                      console.log('No attendance records found');
                      container.innerHTML = '<h3 class="fs-5 fw-bold mt-1 text-center border rounded-3 p-5 mb-2">No staff clock in yet</h3>';
                    } else {
                      data.forEach(entry => {
                        const entryWrapperDiv = document.createElement('div');
                        entryWrapperDiv.classList.add('border', 'rounded-3', 'px-5', 'py-2', 'mb-1');

                        const entryDiv = document.createElement('div');
                        entryDiv.classList.add('d-flex', 'justify-content-between', 'align-items-center');

                        const avatarNameLinkDiv = document.createElement('div');
                        avatarNameLinkDiv.classList.add('d-flex', 'align-items-center');

                        const avatarDiv = document.createElement('div');
                        avatarDiv.classList.add('avatar', 'avatar-2xl');
                        const avatarNamePara = document.createElement('p'); // Create a <p> element
                        avatarNamePara.classList.add('avatar-name', 'rounded-circle'); // Add classes to the <p> element
                        avatarNamePara.innerHTML = `<span class="fs-8 fw-bold fst-italic">${entry.user ? entry.user.username : 'Unknown'}</span>`; // Set inner HTML content
                        avatarDiv.appendChild(avatarNamePara);

                        const nameLink = document.createElement('a');
                        nameLink.classList.add('mb-0', 'ms-3', 'fw-bold', 'fs-8');
                        nameLink.textContent = entry.user ? entry.user.fullname : 'Unknown';

                        avatarNameLinkDiv.appendChild(avatarDiv);
                        avatarNameLinkDiv.appendChild(nameLink);

                        const sectionTypeDiv = document.createElement('div');
                        sectionTypeDiv.classList.add('d-flex', 'flex-column', 'align-items-center');

                        // const sectionPara = document.createElement('p');
                        // sectionPara.classList.add('fw-semibold', 'text-body-emphasis', 'fs-9', 'mb-1', 'text-center');
                        // sectionPara.textContent = entry.user.section;

                        const typeBadge = document.createElement('p');
                        typeBadge.classList.add('badge', 'badge-phoenix', 'fs-10', 'mb-0');

                        if (entry.type === 'sign out') {
                          typeBadge.classList.add('badge-phoenix-danger');
                        } else if (entry.type === 'sign in') {
                          typeBadge.classList.add('badge-phoenix-success');
                        }

                        typeBadge.textContent = entry.type;

                        // sectionTypeDiv.appendChild(sectionPara);
                        sectionTypeDiv.appendChild(typeBadge);

                        entryDiv.appendChild(avatarNameLinkDiv);
                        entryDiv.appendChild(sectionTypeDiv);
                        entryWrapperDiv.appendChild(entryDiv);
                        container.appendChild(entryWrapperDiv);

                      });
                    }
                  })
                  .catch(error => {
                    console.error('Error fetching data:', error);
                  });
              }

              // Call the function initially and then every 5 seconds
              fetchDataAndPopulateContainer();
              setInterval(fetchDataAndPopulateContainer, 2500); // 5000 milliseconds = 5 seconds
            </script>

          </div>

          <style>
            :root {
              --card-gradient-colors: #FFF, #F8FFAE, #b5ffae;
              --glow-colors: #36ba3c;
              --message-colors: ;
            }

            @keyframes glow {
              0% {
                opacity: 0;
              }

              100% {
                opacity: 1;
              }
            }

            #latest-attendance {
              transform: ease;
            }

            #id-card {
              perspective: 1000px;
            }

            #message {
              background-color: var(--message-colors);
            }

            #attendance-card {
              width: 300px;
              height: 400px;
              border-radius: 15px;
              position: relative;
              overflow: hidden;
              animation: rotateCard 3.5s infinite alternate;
              transform-origin: center;
              opacity: 1;
              margin: 0 auto;
            }

            .box-shadow {
              box-shadow: 0 0 15px var(--glow-colors);
            }

            @keyframes rotateCard {
              from {
                transform: rotateY(-20deg);
              }

              to {
                transform: rotateY(20deg);
              }
            }

            .card-body {
              padding: 20px;
            }

            .glow-on-hover {
              width: 100%;
              height: 100%;
              border: none;
              outline: none;
              background: none;
              cursor: pointer;
              position: absolute;
              top: 0;
              left: 0;
              z-index: 1;
              border-radius: inherit;
              overflow: hidden;
            }

            .glow-on-hover:before {
              content: '';
              background: linear-gradient(45deg, var(--card-gradient-colors));
              position: absolute;
              top: -50%;
              left: -50%;
              width: 200%;
              height: 200%;
              z-index: -1;
              opacity: 0;
              animation: glow 0.5s ease-in 1s forwards;
              /* Start the glow animation after 2 seconds and maintain glow style */
              border-radius: inherit;
            }

            .card-body {
              position: relative;
              z-index: 2;
            }

            @media only screen and (max-width: 600px) {
              #attendance-card {
                width: 80%;
                height: auto;
              }
            }

            @keyframes fadeIn {
              from {
                opacity: 0;
              }

              to {
                opacity: 1;
                display: block;
              }
            }

            .fade-in {
              animation: fadeIn 2s ease forwards;
            }
          </style>

          <div class="d-none mt-8 mb-4" id="latest-attendance">
            <div id="id-card" class="d-flex justify-content-center align-items-center mb-0" style="height: 100%;">
              <div class="card border border-gray-200 glow-on-hover mb-2" id="attendance-card">
                <lottie-player id="lottie-player" class="mx-auto mt-n3 position-absolute end-0 top-0" src="https://lottie.host/9286c4fc-dca4-4d7f-b918-85480656a0cf/bLVZCz5laC.json" speed="1" style="width: 110px; height: 110px;" direction="1" mode="normal"></lottie-player>
                <div class="card-body text-center">
                  <div class="mb-2 d-flex justify-content-between">
                    <img id="logo" class="d-none" src="../../assets/img/icons/logo.png" height="40" alt="" />
                    <p></p>
                  </div>
                  <div class="avatar avatar-4xl mb-4 mx-auto">
                    <img class="rounded-circle border border-gray" id="image-placeholder" src="" alt="" />
                  </div>

                  <p class="mb-1 fs-8 fw-bold text-dark" id="fullname-placeholder"></p>
                  <p class="mb-4 fs-8 fw-bold fst-italic text-dark" id="username-placeholder"></p>
                  <p class="mb-1 fs-8 fw-bold text-dark" id="position-placeholder"></p>
                  <p class="mb-5 fs-8 fw-bold text-dark" id="section-placeholder"></p>
                  <p id="message" class="fs-8 fw-bold fst-italic text-center text-light py-1 rounded-5"></p>
                </div>
              </div>
            </div>
          </div>

          <script>
            async function fetchLatestScannedData() {
              fetch('/api/qrcode/get-latest') // Fetch attendance data for today within a specific time range
                .then(response => response.json())
                .then(data => {
                  const message = document.getElementById('message');
                  var card = document.getElementById('attendance-card');
                  const latestAtt = document.getElementById('latest-attendance');
                  var lottiePlayer = document.getElementById('lottie-player');
                  var logo = document.getElementById('logo');
                  const imageElement = document.getElementById('image-placeholder');

                  if (data.message === "No attendance record found.") {
                    console.log('There is no data');
                    latestAtt.classList.add('d-none');
                    card.classList.remove('glow');
                    card.classList.remove('box-shadow');
                    message.classList.add('d-none');
                    logo.classList.add('d-none');
                    lottiePlayer.stop();
                  } else {
                    latestAtt.classList.remove('d-none');
                    const usernamePlaceholder = document.getElementById('username-placeholder');
                    const fullnamePlaceholder = document.getElementById('fullname-placeholder');
                    const positionPlaceholder = document.getElementById('position-placeholder');
                    const sectionPlaceholder = document.getElementById('section-placeholder');

                    usernamePlaceholder.textContent = data.user.username;
                    fullnamePlaceholder.textContent = data.user.fullname;
                    positionPlaceholder.textContent = data.user.position;
                    sectionPlaceholder.textContent = data.user.section;

                    if (data.user.profile === null || data.user.profile === '') {
                      imageElement.src = '/assets/img/team/avatar.webp';
                    } else {
                      imageElement.src = data.user.profile;
                    }

                    let gradientColors = '';
                    let glowColors = '';

                    if (data.temp.type === 'sign out') {
                      gradientColors = '#FFF, #F8FFAE, #FF5733';
                      glowColors = '#FF5733';
                    } else {
                      gradientColors = '#FFF, #F8FFAE, #b5ffae';
                      glowColors = '#36ba3c';
                    }

                    document.documentElement.style.setProperty('--card-gradient-colors', gradientColors);
                    document.documentElement.style.setProperty('--glow-colors', glowColors);

                    // Add glow class after 2 seconds
                    setTimeout(function() {
                      card.classList.add('glow');
                      card.classList.add('box-shadow');
                      logo.classList.remove('d-none');
                      document.documentElement.style.setProperty('--message-colors', glowColors);
                      message.textContent = data.message;
                      message.classList.remove('d-none');
                      lottiePlayer.play();
                    }, 1500);
                  }
                })
                .catch(error => {
                  console.error('Error fetching latest scanned data:', error);
                });
            }

            // Call the function to fetch latest scanned data after a delay
            fetchLatestScannedData();

            setInterval(fetchLatestScannedData, 4500);
          </script>

        </div>

      </div>
    </div>

  </div>

</div>

<%- include('partials/public-footer.ejs') %>