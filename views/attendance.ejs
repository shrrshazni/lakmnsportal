<%- include('partials/public-header') %>

<style>
  body,
  html {
    height: 100%;
    /* Full height for the body and html */
  }

  .full-height {
    height: 100vh;
    /* Full viewport height for centering */
    overflow: hidden !important;
    /* Hide any overflow */
  }

  .card-blurred.card {
    background-color: rgba(255, 255, 255, 0.95);
  }

  @supports (-webkit-backdrop-filter: none) or (backdrop-filter: none) {
    .card-blurred.card {
      -webkit-backdrop-filter: blur(25px) saturate(150%);
      backdrop-filter: blur(25px) saturate(150%);
      background-color: rgba(255, 255, 255, 0.5);
    }
  }
</style>

<div class="d-flex justify-content-center align-items-center full-height p-5 bg-primary">
  <div class="card card-blurred h-100 w-100 text-center">
    <div class="card-body row g-3">
      <div class="col-12 py-5">
        <h1>Good Afternoon</h1>
      </div>

      <div class="col-6">
        <div class="p-5 order-md-0" id="glow-card">
          <div class="card" style="min-height: 25vh;min-width: 40vw;">
            <div class="card-body">

              <img id="qrCode" class="w-100 h-100">

              <script>
                document.addEventListener('DOMContentLoaded', function() {
                  let previousQRData = null;

                  async function updateQRCode() {
                    try {
                      // Generate a new QR code
                      const response = await fetch('/api/qrcode/generate');
                      if (!response.ok) {
                        throw new Error('Network response was not ok');
                      }
                      const data = await response.json();

                      // Update the src attribute of the QR code image
                      document.getElementById('qrCode').src = data.qrCodeImage;

                      // Save the previous QR code data
                      if (previousQRData) {
                        await saveQRData(previousQRData);
                      }

                      // Update the previous QR data to the new one
                      previousQRData = data.uniqueIdentifier;

                      console.log('QR code updated successfully');
                    } catch (error) {
                      console.error('Error updating QR code:', error);
                    }
                  }

                  updateQRCode();
                  setInterval(updateQRCode, 10000);

                  async function saveQRData(qrData) {
                    try {
                      // Perform any actions to save the QR code data here
                      // console.log('Saving QR code data:', qrData);

                      const response = await fetch('/api/qrcode/save-data', {
                        method: 'POST',
                        headers: {
                          'Content-Type': 'application/json'
                        },
                        body: JSON.stringify({
                          qrData: qrData
                        })
                      });

                      if (!response.ok) {
                        throw new Error('Network response was not ok');
                      }

                      // console.log('QR code data successfully saved');
                    } catch (error) {
                      console.error('Error saving QR code data:', error);
                    }
                  }

                  async function fetchLatestScannedData() {
                    fetch('/api/qrcode/get-latest') // Fetch attendance data for today within a specific time range
                      .then(response => response.json())
                      .then(data => {
                        const glow = document.getElementById('glow-card');

                        if (data.temp === null) {
                          console.log('No data found');
                        } else {
                          // Check attendance type
                          if (data.temp.type === 'sign out') {
                            glow.classList.remove('glow-wrapper-1');
                            glow.classList.add('glow-wrapper-2');
                          } else {
                            glow.classList.remove('glow-wrapper-2');
                            glow.classList.add('glow-wrapper-1');
                          }

                          // Keep the glow effect for 2 seconds, then remove it
                          setTimeout(function() {
                            glow.classList.remove('glow-wrapper-1', 'glow-wrapper-2');
                          }, 4000); // Glow for 2 seconds
                        }
                      })
                      .catch(error => {
                        console.error('Error fetching latest scanned data:', error);
                      });
                  }

                  // Call the function to fetch latest scanned data immediately
                  fetchLatestScannedData();

                  // Set interval to fetch data every 4.5 seconds
                  setInterval(fetchLatestScannedData, 4500);

                });
              </script>

            </div>
          </div>
        </div>
      </div>

      <div class="col-6">
        <div class="p-5">
          <h1>Hello 3</h1>
        </div>
      </div>
    </div>
  </div>
</div>

<%- include('partials/public-footer.ejs') %>