<%- include('partials/private-header.ejs') %>

<div class="mb-6">

  <div class="mb-6">
    <h2 class="mb-2">Attendance Overview</h2>
    <h5 class="text-body-tertiary fw-semibold">Tracking Participation, Absences, Presence.</h5>
  </div>

  <div class="mx-n4 px-4 mx-lg-n6 px-lg-6 bg-body-emphasis pt-7 pb-3 border-y mb-6">
    <div id="all-attendance" data-list='{"valueNames":["staff","department","section","attendance"],"page":10,"pagination":true}'>

      <div class="mb-3">
        <h3>All attendance</h3>
        <p class="text-body-tertiary lh-sm mb-0">Every team member attendance throughout one calendar.</p>
      </div>

      <div class="row align-items-end justify-content-between pb-4 g-3">

        <div class="col-12 col-md-auto order-1 order-lg-0">
          <div class="form-icon-container">
            <input class="form-control form-icon-input" type="text" id="searchInput" name="date" placeholder="Search" />
            <span class="fas fa-search text-900 fs-9 form-icon"></span>
          </div>
        </div>

        <div class="col-12 col-md-auto d-flex justify-content-center d-none">
          <div class="d-flex align-items-center mx-2"><span class="d-inline-block bg-success bullet-item me-2"></span>
            <p class="mb-0 fw-semibold text-body lh-sm flex-1">Present</p>
          </div>
          <div class="d-flex align-items-center mx-2"><span class="d-inline-block bg-danger bullet-item me-2"></span>
            <p class="mb-0 fw-semibold text-body lh-sm flex-1">Absent</p>
          </div>
          <div class="d-flex align-items-center mx-2"><span class="d-inline-block bg-warning bullet-item me-2"></span>
            <p class="mb-0 fw-semibold text-body lh-sm flex-1">Late</p>
          </div>
          <div class="d-flex align-items-center mx-2"><span class="d-inline-block bg-info bullet-item me-2"></span>
            <p class="mb-0 fw-semibold text-body lh-sm flex-1">Invalid</p>
          </div>
          <div class="d-flex align-items-center mx-2"><span class="d-inline-block bg-warning-lighter bullet-item me-2"></span>
            <p class="mb-0 fw-semibold text-body lh-sm flex-1">Leave</p>
          </div>
        </div>

        <div class="col-12 col-md-auto order-0 order-lg-1">
          <div class="form-icon-container">
            <input class="form-control datetimepicker flatpickr-input form-icon-input" type="text" id="selectedDate" name="date" placeholder="Select date" data-options='{"disableMobile":true,"allowInput":true, "locale" : { "firstDayOfWeek" : 1}, "mode": "single", "dateFormat": "m/Y","disable": [true] }' />
            <span class="fas fa-calendar text-900 fs-9 form-icon"></span>
          </div>

        </div>

      </div>

      <div class="table-responsive ms-n1 ps-1 scrollbar">
        <table class="table fs-9 mb-0 border-top border-translucent">
          <thead style="pointer-events: none;">
            <tr>
              <th class="sort white-space-nowrap align-middle ps-0" scope="col" style="width:20%;">STAFF</th>
              <th class="sort align-middle text-center ps-0" scope="col" style="width:15%;">DEPARTMENT</th>
              <th class="sort align-middle text-center ps-0" scope="col" style="width:15%;">SECTION</th>
              <th class="sort align-middle text-center ps-0" scope="col" style="width:10%;">ATTENDANCE</th>
              <th class="sort align-middle text-center ps-0" scope="col" style="width:10%;">STATUS</th>
            </tr>
          </thead>

          <tbody class="list" id="all-attendance-body">


          </tbody>

        </table>
      </div>
      <div class="row align-items-center justify-content-center py-2 pe-0 fs-9 mt-3">
        <div class="col-auto d-flex">
          <button class="page-link" id="prevPage"><span class="fas fa-chevron-left"></span></button>
          <ul class="mb-0 pagination" id="pagination"></ul>
          <button class="page-link pe-0" id="nextPage"><span class="fas fa-chevron-right"></span></button>
        </div>
      </div>
    </div>

    <script>
      document.addEventListener('DOMContentLoaded', function() {
        const selectedDateInput = document.getElementById('selectedDate');
        const searchInput = document.getElementById('searchInput');
        const prevPageButton = document.getElementById('prevPage');
        const nextPageButton = document.getElementById('nextPage');
        const paginationContainer = document.getElementById('pagination');
        const dataContainer = document.getElementById('all-attendance-body');
        let currentPage = 1;

        // Function to fetch attendance data with pagination, search query, and selected date
        function fetchData(page, searchQuery, selectedDate) {

          if (!selectedDate) {
            // Display message when no date is selected
            // Render empty table or display message indicating no date is selected
            renderEmptyTable();
            return;
          }
          fetch(`/api/data/all-attendance?page=${page}&search=${searchQuery}&date=${selectedDate}`, {
              method: 'POST',
              headers: {
                'Content-Type': 'application/json'
              },
              body: JSON.stringify({
                date: selectedDate
              })
            })
            .then(response => response.json())
            .then(data => {
              // Update the table with the received attendance data
              renderTable(data.data1, selectedDate);

              // Update pagination
              updatePagination(data.data2.length, 10);


            })
            .catch(error => {
              console.error('Error:', error);
            });
        }

        function updatePagination(totalItems, limit) {
          const totalPages = Math.ceil(totalItems / limit);
          const paginationContainer = document.getElementById('pagination');

          paginationContainer.innerHTML = ''; // Clear existing pagination buttons

          let startPage;
          let endPage;

          if (totalPages <= 3) {
            startPage = 1;
            endPage = totalPages;
          } else if (currentPage === 1) {
            startPage = 1;
            endPage = 3;
          } else if (currentPage === 2) {
            startPage = 1;
            endPage = 4;
          } else if (currentPage >= totalPages - 1) {
            endPage = totalPages;
            startPage = Math.max(1, endPage - 4); // Display 5 buttons
          } else {
            startPage = currentPage - 2;
            endPage = currentPage + 2;
          }

          if (startPage !== 1) {
            const prevEllipsisButton = document.createElement('button');
            prevEllipsisButton.textContent = '...';
            prevEllipsisButton.classList.add('btn', 'pagination-button', 'mx-0', 'px-3', 'fs-10', 'border-0'); // Add Bootstrap classes
            prevEllipsisButton.disabled = true;
            paginationContainer.appendChild(prevEllipsisButton);
          }

          for (let page = startPage; page <= endPage; page++) {
            const paginationButton = document.createElement('button');
            paginationButton.textContent = page;
            paginationButton.classList.add('btn', 'pagination-button', 'mx-0', 'px-3', 'fs-10'); // Add Bootstrap classes

            if (page === currentPage) {
              paginationButton.classList.add('btn-primary');
            } else {
              paginationButton.classList.remove('btn-primary');
            }

            paginationButton.addEventListener('click', () => {
              currentPage = page;
              fetchData(currentPage, searchInput.value, selectedDateInput.value);
            });

            paginationContainer.appendChild(paginationButton);
          }

          if (endPage < totalPages) {
            const nextEllipsisButton = document.createElement('button');
            nextEllipsisButton.textContent = '...';
            nextEllipsisButton.classList.add('btn', 'pagination-button', 'mx-0', 'px-3', 'fs-10', 'border-0'); // Add Bootstrap classes
            nextEllipsisButton.disabled = true;
            paginationContainer.appendChild(nextEllipsisButton);
          }
        }

        // Function to render pagination buttons
        function renderPagination(totalPages) {
          console.log('Rendering pagination with total pages:', totalPages); // Log total pages
          paginationContainer.innerHTML = '';

          for (let i = 1; i <= totalPages; i++) {
            const button = document.createElement('button');
            button.textContent = i;
            button.addEventListener('click', () => {
              currentPage = i;
              fetchData(currentPage, searchInput.value, selectedDateInput.value);
            });
            paginationContainer.appendChild(button);
          }
        }

        // Update the table with the received attendance data
        function renderTable(data, date) {
          const tbody = document.querySelector('#all-attendance-body');
          tbody.innerHTML = ''; // Clear existing rows

          const [month, year] = date.split('/').map(Number); // Extract year and month from the selected date
          const daysInMonth = new Date(year, month, 0).getDate();

          data.forEach(entry => {
            // Construct HTML row for each entry

            const presentCount = entry.statusCounts['Present'] || 0;
            const presentPercentage = ((presentCount / daysInMonth) * 100).toFixed(0);

            const absentCount = entry.statusCounts['Absent'] || 0;
            const absentPercentage = ((absentCount / daysInMonth) * 100).toFixed(0);

            const lateCount = entry.statusCounts['Late'] || 0;
            const latePercentage = ((lateCount / daysInMonth) * 100).toFixed(0);

            const invalidCount = entry.statusCounts['Invalid'] || 0;
            const invalidPercentage = ((invalidCount / daysInMonth) * 100).toFixed(0);

            const leaveCount = entry.statusCounts['Leave'] || 0;
            const leavePercentage = ((leaveCount / daysInMonth) * 100).toFixed(0);

            const totalAttendance = presentCount + lateCount + leaveCount;
            const totalPercentage = ((totalAttendance / daysInMonth) * 100).toFixed(0);

            const row = `
                <tr class="position-static border-top">
                    <td class="align-middle text-body white-space-nowrap ps-0 staff">
                        <div class="avatar avatar-2xl">
                            <div class="avatar-name rounded-circle"><span class="fs-8">${entry.user ? entry.user.username : 'Unknown'}</span></div>
                        </div>
                        <a class="mb-0 ms-3 fw-bold fs-8" href="">${entry.user ? entry.user.fullname : 'Unknown'}</a>
                    </td>
                    <td class="align-middle text-center department ps-0">
                        <p class="fw-semibold text-body-emphasis fs-9 mb-0">${entry.user ? entry.user.department : 'Unknown'}</p>
                    </td>
                    <td class="align-middle text-center section ps-0">
                        <p class="fw-semibold text-body-emphasis fs-9 mb-0">${entry.user ? entry.user.section : 'Unknown'}</p>
                    </td>
                    <td class="align-middle text-center attendance px-5">
                        <p class="fs-10">${totalAttendance} / ${daysInMonth}</p>
                        <div class="progress progress-stack mt-n3" style="height:5px;">
                          <div <% /* eslint-disable css-propertyvalueexpected */ %> class="progress-bar bg-primary" style="width:${totalPercentage}%" data-bs-toggle="tooltip" data-bs-placement="top" title="${totalPercentage}%"></div>
                        </div>
                    </td>
                    <td class="align-middle text-center status px-5">
                        <p class="fs-10 opacity-0">${presentCount} / ${daysInMonth}</p>
                        <div class="progress progress-stack mt-n3" style="height:5px;">
                          <div <% /* eslint-disable css-propertyvalueexpected */ %> class="progress-bar bg-success" style="width:${presentPercentage}%" data-bs-toggle="tooltip" data-bs-placement="top" title="Present ${presentPercentage}% "></div>
                          <div <% /* eslint-disable css-propertyvalueexpected */ %> class="progress-bar bg-danger" style="width:${absentPercentage}%" data-bs-toggle="tooltip" data-bs-placement="top" title="Absent ${absentPercentage}% "></div>
                          <div <% /* eslint-disable css-propertyvalueexpected */ %> class="progress-bar bg-warning" style="width:${latePercentage}%" data-bs-toggle="tooltip" data-bs-placement="top" title="Late ${latePercentage}% "></div>
                          <div <% /* eslint-disable css-propertyvalueexpected */ %> class="progress-bar bg-info" style="width:${invalidPercentage}%" data-bs-toggle="tooltip" data-bs-placement="top" title="Invalid ${invalidPercentage}% "></div>
                          <div <% /* eslint-disable css-propertyvalueexpected */ %> class="progress-bar bg-success-lighter" style="width:${leavePercentage}%" data-bs-toggle="tooltip" data-bs-placement="top" title="Leave ${leavePercentage}% "></div>
                        </div>
                    </td>
                </tr>`;
            // Insert the HTML row into the table body
            tbody.insertAdjacentHTML('beforeend', row);

            const tooltipTriggerList = document.querySelectorAll('[data-bs-toggle="tooltip"]')
            const tooltipList = [...tooltipTriggerList].map(tooltipTriggerEl => new bootstrap.Tooltip(tooltipTriggerEl))
          });
        }

        function calculateAttendancePercentage(data, selectedDate) {
          const [month, year] = selectedDate.split('/').map(Number); // Extract year and month from the selected date
          const daysInMonth = new Date(year, month, 0).getDate(); // Get the number of days in the selected month

          const attendancePercentage = new Array(daysInMonth).fill(0); // Initialize an array to store the percentage for each day

          // Iterate through the data and update the attendance percentage array
          data.forEach(entry => {
            const entryDate = new Date(entry.date); // Assuming the date is in ISO format
            if (entryDate.getFullYear() === year && entryDate.getMonth() + 1 === month) {
              const dayOfMonth = entryDate.getDate();
              const presentCount = entry.statusCounts['Present'] || 0;
              attendancePercentage[dayOfMonth - 1] += (presentCount / daysInMonth) * 100; // Calculate percentage for each day
            }
          });

          return attendancePercentage;
        }

        function renderEmptyTable() {
          const tbody = document.querySelector('tbody');
          tbody.innerHTML = '<tr><td colspan="5" class="text-center fs-8">No date selected</td></tr>';
        }

        // Event listener for search input
        searchInput.addEventListener('input', function() {
          currentPage = 1; // Reset current page to 1
          fetchData(currentPage, this.value, selectedDateInput.value);
        });

        // Event listener for previous page button
        prevPageButton.addEventListener('click', function() {
          if (currentPage > 1) {
            currentPage--;
            fetchData(currentPage, searchInput.value, selectedDateInput.value);
          }
        });

        // Event listener for next page button
        nextPageButton.addEventListener('click', function() {
          currentPage++;
          fetchData(currentPage, searchInput.value, selectedDateInput.value);
        });

        // Event listener for selected date input change
        selectedDateInput.addEventListener('change', function(event) {
          currentPage = 1; // Reset current page to 1
          fetchData(currentPage, searchInput.value, event.target.value);
        });

        // Initial data fetch when the page loads
        fetchData(currentPage, searchInput.value, selectedDateInput.value);
      });
    </script>

  </div>

</div>

<%- include('partials/private-footer.ejs') %>