<%- include('partials/private-header.ejs') %>

<div class="mb-6">

  <div class="mb-6">
    <h2 class="mb-2">Leave Overview</h2>
    <h5 class="text-body-tertiary fw-semibold">Temporary absence for personal reasons</h5>
  </div>

  <!-- colour script for echarts -->
  <script>
    // take the root of the colour from css for echarts
    const style = getComputedStyle(document.body);
    const theme = {
      primary: style.getPropertyValue('--phoenix-primary'),
      secondary: style.getPropertyValue('--phoenix-secondary'),
      success: style.getPropertyValue('--phoenix-success'),
      info: style.getPropertyValue('--phoenix-info'),
      warning: style.getPropertyValue('--phoenix-warning'),
      danger: style.getPropertyValue('--phoenix-danger'),
      bg_primary_subtle: style.getPropertyValue('--phoenix-primary-bg-subtle'),
      tertiary: style.getPropertyPriority('--phoenix-tertiary-color'),
      light: style.getPropertyValue('--phoenix-light'),
      dark: style.getPropertyValue('--phoenix-dark'),
      secondary_subtle: style.getPropertyValue('--phoenix-secondary-border-subtle'),
      cyan: style.getPropertyValue('--phoenix-cyan'),
      gray_100: style.getPropertyValue('--phoenix-gray-100')
    };

    //   take css class color based on their property color/bg-colour for echarts
    function getColor(className, property) {
      var element = document.createElement('div');
      element.className = className;
      document.body.appendChild(element);

      var computedStyle = window.getComputedStyle(element);
      var color = computedStyle.getPropertyValue(property);

      document.body.removeChild(element);

      return color;
    }
  </script>

  <div class="px-0 px-md-4 mb-6">

    <div class="row justify-content-between mb-6">
      <div class="col-6 col-md-4 col-xxl-2 text-center border-translucent border-start-xxl border-end-xxl-0 border-bottom-xxl-0 border-end border-bottom pb-4 pb-xxl-0 "><span class="uil fs-5 lh-1 fa-solid fa-calendar text-primary"></span>
        <h1 class="fs-5 pt-3"><%= allLeave.length %></h1>
        <p class="fs-9 mb-0">Total All Leave</p>
      </div>
      <div class="col-6 col-md-4 col-xxl-2 text-center border-translucent border-start-xxl border-end-xxl-0 border-bottom-xxl-0 border-end-md border-bottom pb-4 pb-xxl-0"><span class="uil fs-5 lh-1 fa-solid fa-calendar-day text-info"></span>
        <h1 class="fs-5 pt-3"><%= allLeave.filter(leave => leave.status === 'submitted').length %></h1>
        <p class="fs-9 mb-0">Total Submitted</p>
      </div>
      <div class="col-6 col-md-4 col-xxl-2 text-center border-translucent border-start-xxl border-bottom-xxl-0 border-bottom border-end border-end-md-0 pb-4 pb-xxl-0 pt-4 pt-md-0"><span class="uil fs-5 lh-1 fa-solid fa-calendar-plus text-primary"></span>
        <h1 class="fs-5 pt-3"><%= allLeave.filter(leave => leave.status === 'pending').length %></h1>
        <p class="fs-9 mb-0">Total Pending</p>
      </div>
      <div class="col-6 col-md-4 col-xxl-2 text-center border-translucent border-start-xxl border-end-md border-end-xxl-0 border-bottom border-bottom-md-0 pb-4 pb-xxl-0 pt-4 pt-xxl-0"><span class="uil fs-5 lh-1 fa-solid fa-calendar-minus text-warning"></span>
        <h1 class="fs-5 pt-3"><%= allLeave.filter(leave => leave.status === 'invalid').length %> %></h1>
        <p class="fs-9 mb-0">Total Invalid</p>
      </div>
      <div class="col-6 col-md-4 col-xxl-2 text-center border-translucent border-start-xxl border-end border-end-xxl-0 pb-md-4 pb-xxl-0 pt-4 pt-xxl-0"><span class="uil fs-5 lh-1 fa-solid fa-calendar-check text-success"></span>
        <h1 class="fs-5 pt-3"><%= allLeave.filter(leave => leave.status === 'approved').length %> %></h1>
        <p class="fs-9 mb-0">Total Approved</p>
      </div>
      <div class="col-6 col-md-4 col-xxl-2 text-center border-translucent border-start-xxl border-end-xxl pb-md-4 pb-xxl-0 pt-4 pt-xxl-0"><span class="uil fs-5 lh-1 fa-solid fa-calendar-xmark text-danger"></span>
        <h1 class="fs-5 pt-3"><%= allLeave.filter(leave => leave.status === 'denied').length %> %></h1>
        <p class="fs-9 mb-0">Total Denied</p>
      </div>

    </div>

    <div class="row g-4">

      <div class="col-12 d-none">
        <div class="row g-3">
          <div class="col-12 col-md-6">
            <div class="card h-100">
              <div class="card-body">
                <div class="d-flex justify-content-between">
                  <div>
                    <h5 class="mb-1">Total Pending<span class="badge badge-phoenix badge-phoenix-success rounded-pill fs-9 ms-2"><span class="badge-label" id="differencepending"></span></span></h5>
                    <h6 class="text-body-tertiary">Last 7 days</h6>
                  </div>
                  <h4 id="totalpending"></h4>
                </div>
                <div class="d-flex justify-content-center px-4 py-6">
                  <div id="leave-status-chart" style="height:100px;width:200px"></div>
                </div>

                <!-- JavaScript code for ECharts -->
                <script>
                  document.addEventListener('DOMContentLoaded', function() {

                    const leavePendingInvalidURL = `/api/leave/pending-invalid`;

                    // Fetch data or perform any other actions with the updated URL
                    // For example:
                    fetch(leavePendingInvalidURL)
                      .then(response => response.json())
                      .then(data => {
                        renderBarVSCharts(data.dateCounts);

                        document.getElementById('differencepending').innerText = `${data.formattedDifferencePending}%`;
                        document.getElementById('totalpending').innerText = `${data.totalPending}`;
                        document.getElementById('totalpercentagepending').innerText = `${data.totalPercentagePending}%`;
                        document.getElementById('totalpercentageinvalid').innerText = `${data.totalPercentageInvalid}%`;
                      })
                      .catch(error => {
                        // Handle errors
                        console.error('Error:', error);
                      });

                    function renderBarVSCharts(dateCounts) {
                      var leaveStatusChart = echarts.init(document.getElementById('leave-status-chart'), null, {
                        devicePixelRatio: window.devicePixelRatio > 1 ? 2 : 1,
                        renderer: 'canvas',
                        width: 'auto',
                        height: 'auto'
                      });

                      var xAxisData = Object.keys(dateCounts);

                      var submittedData = Object.values(dateCounts).map(function(entry) {
                        return entry.percentage;
                      });

                      var invalidData = Object.values(dateCounts).map(function(entry) {
                        return entry.invalid;
                      });

                      // Chart options
                      var option = {
                        color: theme.primary,
                        tooltip: {
                          trigger: 'item',
                          padding: [7, 10],
                          backgroundColor: getColor('bg-body', 'background-color'),
                          borderColor: theme.secondary_subtle,
                          textStyle: {
                            color: getColor('link-primary', 'color')
                          },
                          borderWidth: 1,
                          transitionDuration: 0,
                          axisPointer: {
                            type: 'none'
                          },
                          formatter: function(params) {
                            return `${params.name} (${params.value}%)`;
                          }
                        },
                        xAxis: {
                          type: 'category',
                          data: xAxisData,
                          show: true,
                          boundaryGap: false,
                          axisLine: {
                            show: true,
                            lineStyle: {
                              color: '#e3e6ed'
                            }
                          },
                          axisTick: {
                            show: false
                          },
                          axisLabel: {
                            interval: 6,
                            showMinLabel: true,
                            showMaxLabel: true,
                            color: '#949db5'
                          }
                        },
                        yAxis: {
                          show: false,
                          type: 'value',
                          max: 100,
                          boundaryGap: false
                        },
                        series: [{
                          type: 'bar',
                          barWidth: '5px',
                          data: submittedData,
                          showBackground: true,
                          symbol: 'none',
                          itemStyle: {
                            borderRadius: 10
                          },
                          backgroundStyle: {
                            borderRadius: 10,
                            color: theme.bg_primary_subtle,
                            opacity: 1.0
                          }
                        }],
                        grid: {
                          right: 10,
                          left: 10,
                          bottom: 0,
                          top: 0
                        }
                      };

                      // Set chart option and render
                      leaveStatusChart.setOption(option);

                      window.addEventListener('resize', function() {
                        leaveStatusChart.resize();
                      });
                    }

                  });
                </script>

                <div class="mt-2">
                  <div class="d-flex align-items-center mb-2">
                    <div class="bullet-item me-2 bg-primary"></div>
                    <h6 class="text-body fw-semibold flex-1 mb-0">Pending</h6>
                    <h6 class="text-body fw-semibold mb-0" id="totalpercentagepending"></h6>
                  </div>
                  <div class="d-flex align-items-center">
                    <div class="bullet-item bg-primary-subtle me-2"></div>
                    <h6 class="text-body fw-semibold flex-1 mb-0">Invalid</h6>
                    <h6 class="text-body fw-semibold mb-0" id="totalpercentageinvalid"></h6>
                  </div>
                </div>
              </div>
            </div>
          </div>
          <div class="col-12 col-md-6">
            <div class="card h-100">
              <div class="card-body">
                <div class="d-flex justify-content-between">
                  <div>
                    <h5 class="mb-1">New submission<span class="badge badge-phoenix badge-phoenix-success rounded-pill fs-9 ms-2"> <span class="badge-label" id="submissionpercentage">+26.5%</span></span></h5>
                    <h6 class="text-body-tertiary">Last 7 days</h6>
                  </div>
                  <h4 id="totalsubmitted"></h4>
                </div>
                <div class="d-flex justify-content-center px-2 py-4">
                  <div id="leave-submitted-chart" style="height:180px;width:80%;"></div>
                </div>

                <script>
                  document.addEventListener('DOMContentLoaded', function() {

                    const leaveSubmittedURL = `/api/leave/submmitted`;

                    // Fetch data or perform any other actions with the updated URL
                    // For example:
                    fetch(leaveSubmittedURL)
                      .then(response => response.json())
                      .then(data => {
                        renderLineChartSubmitted(data);

                        document.getElementById('totalsubmitted').innerText = `${data.totalSubmitted}`;
                        document.getElementById('submissionpercentage').innerText = `${data.formattedDifference}`;
                      })
                      .catch(error => {
                        // Handle errors
                        console.error('Error:', error);
                      });

                    function renderLineChartSubmitted(submittedCounts) {
                      var leaveSubmittedChart = echarts.init(document.getElementById('leave-submitted-chart'), null, {
                        devicePixelRatio: window.devicePixelRatio > 1 ? 2 : 1,
                        renderer: 'canvas',
                        width: 'auto',
                        height: 'auto'
                      });

                      // Extract x-axis labels and series data
                      var xAxisData = Object.keys(submittedCounts.submittedCountsLast7Days);
                      var submittedData = Object.values(submittedCounts.submittedCountsLast7Days);

                      // Chart options
                      var option = {
                        color: theme.primary,
                        tooltip: {
                          trigger: 'axis',
                          padding: 10,
                          backgroundColor: getColor('bg-body', 'background-color'),
                          borderColor: theme.secondary_subtle,
                          textStyle: {
                            color: getColor('link-primary', 'color')
                          },
                          borderWidth: 1,
                          transitionDuration: 0,
                          axisPointer: {
                            type: 'none'
                          },
                          formatter: function(params) {
                            // Customize tooltip content
                            var date = params[0].name;
                            var submittedCount = params[0].value;

                            return `Date: ${date}<br/>Submitted Count: ${submittedCount}`;
                          }
                        },
                        xAxis: [{
                            type: 'category',
                            data: xAxisData,
                            show: true,
                            boundaryGap: false,
                            axisLine: {
                              show: true,
                              lineStyle: {
                                color: getColor('bg-text-primary', 'color'),
                                opacity: 0.5
                              }
                            },
                            axisTick: {
                              show: false
                            },
                            axisLabel: {
                              showMinLabel: true,
                              showMaxLabel: false,
                              color: getColor('bg-text-primary', 'color'),
                              opacity: 1,
                              align: 'left',
                              interval: 5,
                              fontFamily: 'Nunito Sans',
                              fontWeight: 600,
                              fontSize: 12.8
                            }
                          },
                          {
                            type: 'category',
                            position: 'bottom',
                            show: true,
                            data: xAxisData,
                            axisLabel: {
                              interval: 130,
                              showMaxLabel: true,
                              showMinLabel: false,
                              color: getColor('bg-text-primary', 'color'),
                              opacity: 1,
                              align: 'right',
                              fontFamily: 'Nunito Sans',
                              fontWeight: 600,
                              fontSize: 12.8
                            },
                            axisLine: {
                              show: false
                            },
                            axisTick: {
                              show: false
                            },
                            splitLine: {
                              show: false
                            },
                            boundaryGap: false
                          }
                        ],
                        yAxis: {
                          show: false,
                          type: 'value',
                          boundaryGap: false
                        },
                        series: [{
                          type: 'line',
                          data: submittedData,
                          smooth: true,
                          symbol: 'circle',
                          lineStyle: {
                            color: theme.primary
                          },
                          itemStyle: {
                            color: theme.primary
                          }
                        }],
                        grid: {
                          left: 0,
                          right: 0,
                          top: 5,
                          bottom: 20
                        }
                      };

                      // Set chart option and render
                      leaveSubmittedChart.setOption(option);

                      window.addEventListener('resize', function() {
                        leaveSubmittedChart.resize();
                      });
                    }
                  });
                </script>

              </div>
            </div>
          </div>
          <div class="col-12 col-md-12">
            <div class="card h-100">

              <div class="card-body">
                <div class="d-flex justify-content-between">
                  <div>
                    <h5 class="mb-2">Leave status</h5>
                    <h6 class="text-body-tertiary">Last 7 days</h6>
                  </div>
                  <h4 id="totalstatus"></h4>
                </div>

                <div class="row g-3">
                  <div class="col-12 col-md-7">
                    <div class="pb-3 pt-3">
                      <div id="leave-status-pie-chart" style="height:150px;width:100%;"></div>
                    </div>

                    <script>
                      document.addEventListener('DOMContentLoaded', function() {

                        const leaveStatusURL = `/api/leave/status`;

                        // Fetch data or perform any other actions with the updated URL
                        // For example:
                        fetch(leaveStatusURL)
                          .then(response => response.json())
                          .then(data => {
                            renderPieChartLeaveStatus(data);

                            document.getElementById('totalstatus').innerText = `${data.totalLeaves}`;
                            document.getElementById('statuspercentagesubmitted').innerText = `${data.percentageSubmitted}%`;
                            document.getElementById('statuspercentageapproved').innerText = `${data.percentageApproved}%`;
                            document.getElementById('statuspercentagedenied').innerText = `${data.percentageDenied}%`;
                            document.getElementById('statuspercentagepending').innerText = `${data.percentagePending}%`;
                            document.getElementById('statuspercentageinvalid').innerText = `${data.percentageInvalid}%`;
                          })
                          .catch(error => {
                            // Handle errors
                            console.error('Error:', error);
                          });


                        function renderPieChartLeaveStatus(data) {

                          // Create a pie chart instance
                          const leaveStatusPieChart = echarts.init(document.getElementById('leave-status-pie-chart'), null, {
                            devicePixelRatio: window.devicePixelRatio > 1 ? 2 : 1,
                            renderer: 'canvas',
                            width: 'auto',
                            height: 'auto'
                          });

                          const ringPieChartData = [{
                              value: data.percentageSubmitted,
                              name: 'Submitted'
                            },
                            {
                              value: data.percentageApproved,
                              name: 'Approved'
                            },
                            {
                              value: data.percentageDenied,
                              name: 'Denied'
                            },
                            {
                              value: data.percentagePending,
                              name: 'Pending'
                            },
                            {
                              value: data.percentageInvalid,
                              name: 'Invalid'
                            },

                          ];

                          // Set up options for the pie chart
                          const option = {
                            color: [
                              getColor('bg-primary-lighter', 'background-color'),
                              getColor('bg-secondary', 'background-color'),
                              getColor('bg-warning-lighter', 'background-color'),
                              getColor('bg-info-lighter', 'background-color'),
                              getColor('bg-success-lighter', 'background-color')
                            ],
                            tooltip: {
                              trigger: 'item',
                              padding: [7, 10],
                              backgroundColor: getColor('bg-body', 'background-color'),
                              borderColor: theme.secondary_subtle,
                              textStyle: {
                                color: getColor('link-primary', 'color')
                              },
                              borderWidth: 1,
                              transitionDuration: 0,
                              axisPointer: {
                                type: 'none'
                              },
                              formatter: function(params) {
                                return `${params.name} (${params.value}%)`;
                              }
                            },
                            series: [{
                              type: 'pie',
                              radius: ['99%', '85%'],
                              avoidLabelOverlap: false,
                              label: {
                                show: false,
                                position: 'center'
                              },
                              emphasis: {
                                scale: false,
                                itemStyle: {
                                  color: 'inherit'
                                }
                              },
                              itemStyle: {
                                borderWidth: 1,
                                borderColor: getColor('bg-body', 'background-color'),
                              },
                              data: ringPieChartData
                            }]
                          };

                          // Set chart options and render
                          leaveStatusPieChart.setOption(option);

                          window.addEventListener('resize', function() {
                            leaveStatusPieChart.resize();
                          });
                        }
                      });
                    </script>
                  </div>

                  <div class="col-12 col-md-5 my-auto">
                    <div class="d-flex align-items-center mb-1">
                      <div class="bullet-item me-2 bg-primary-lighter"></div>
                      <h6 class="text-body fw-semibold flex-1 mb-0">Submitted</h6>
                      <h6 class="text-body fw-semibold mb-0" id="statuspercentagesubmitted"></h6>
                    </div>
                    <div class="d-flex align-items-center mb-1">
                      <div class="bullet-item me-2 bg-secondary"></div>
                      <h6 class="text-body fw-semibold flex-1 mb-0">Approved</h6>
                      <h6 class="text-body fw-semibold mb-0" id="statuspercentageapproved"></h6>
                    </div>
                    <div class="d-flex align-items-center mb-1">
                      <div class="bullet-item me-2 bg-warning-lighter"></div>
                      <h6 class="text-body fw-semibold flex-1 mb-0">Denied</h6>
                      <h6 class="text-body fw-semibold mb-0" id="statuspercentagedenied"></h6>
                    </div>
                    <div class="d-flex align-items-center mb-1">
                      <div class="bullet-item me-2 bg-info-lighter"></div>
                      <h6 class="text-body fw-semibold flex-1 mb-0">Pending</h6>
                      <h6 class="text-body fw-semibold mb-0" id="statuspercentagepending"></h6>
                    </div>
                    <div class="d-flex align-items-center">
                      <div class="bullet-item me-2 bg-success-lighter"></div>
                      <h6 class="text-body fw-semibold flex-1 mb-0">Invalid</h6>
                      <h6 class="text-body fw-semibold mb-0" id="statuspercentageinvalid"></h6>
                    </div>
                  </div>
                </div>

              </div>

            </div>
          </div>
        </div>
      </div>

      <div class="col-12 d-none">

        <div class="row flex-between-center mb-4 g-3">
          <div class="col-auto">
            <h3>Leaves per month</h3>
            <p class="text-body-tertiary lh-sm mb-0">Leaves across all of department in one calendar</p>
          </div>
          <div class="col-8 col-sm-3">
            <select class="form-select form-select-sm" id="select-month" onchange="filterTable();">
              <option>January</option>
              <option>February</option>
              <option>March</option>
              <option>April</option>
              <option>May</option>
              <option>June</option>
              <option>July</option>
              <option>August</option>
              <option>September</option>
              <option>October</option>
              <option>November</option>
              <option>December</option>
            </select>
          </div>

          <script>
            function handleMonthChangeWithTotalLeaves() {
              // Get the selected option value
              const selectedOption = document.getElementById('select-month');
              const selectedMonth = selectedOption.options[selectedOption.selectedIndex].text;

              // Update the URL with the selected month and use the new API endpoint
              const leaveTotalCountURL = `/api/leave/totalcount?month=${selectedMonth}`;

              // Fetch data for total leave count
              fetch(leaveTotalCountURL)
                .then(response => response.json())
                .then(data => {
                  // Display the total leave count (assuming you have an element with id 'totalLeaves')
                  document.getElementById('totalLeaves').innerText = `${data.totalLeaveCount}`;
                })
                .catch(error => {
                  // Handle errors
                  console.error('Error:', error);
                });
            }

            // Attach the event listener to the select element
            document.getElementById('select-month').addEventListener('change', handleMonthChangeWithTotalLeaves);

            // Initial call to handleMonthChangeWithTotalLeaves to load data for the default selected month
            handleMonthChangeWithTotalLeaves();
          </script>

        </div>

        <div id="selected-month-leave-chart" style="min-height: 400px;"></div>

        <script>
          function handleMonthChange() {
            // Get the selected option value
            var selectedOption = document.getElementById('select-month');
            var month = selectedOption.options[selectedOption.selectedIndex].text;

            // Update the URL with the selected month
            const leaveSelectedMonthURL = `/api/leave/selectedmonth?month=${month}`;

            // Fetch data or perform any other actions with the updated URL
            // For example:
            fetch(leaveSelectedMonthURL)
              .then(response => response.json())
              .then(data => {
                // Call the function to render the line chart with the fetched data
                renderLineChart(data);
              })
              .catch(error => {
                // Handle errors
                console.error('Error:', error);
              });
          }

          // Attach the event listener to the select element
          document.getElementById('select-month').addEventListener('change', handleMonthChange);

          // Initial call to handleMonthChange to load data for the default selected month
          handleMonthChange();


          function renderLineChart(data) {
            // Extract data for the line chart
            const days = Object.keys(data);
            const approved = Object.values(data).map(dayData => dayData.approved);
            const denied = Object.values(data).map(dayData => dayData.denied);

            // Create the ECharts chart
            const lineChart = echarts.init(document.getElementById('selected-month-leave-chart'), null, {
              devicePixelRatio: window.devicePixelRatio > 1 ? 2 : 1,
              renderer: 'canvas',
              width: 'auto',
              height: 'auto'
            });

            // Specify the chart options
            const options = {
              responsive: true,
              color: [theme.primary, theme.cyan],
              tooltip: {
                trigger: 'axis',
                padding: 10,
                backgroundColor: getColor('bg-body', 'background-color'),
                borderColor: theme.secondary_subtle,
                textStyle: {
                  color: getColor('link-primary', 'color')
                },
                borderWidth: 1,
                transitionDuration: 0,
                axisPointer: {
                  type: 'none'
                },
              },
              xAxis: [{
                  type: 'category',
                  data: days,
                  axisLabel: {
                    formatter: function(value) {
                      return `Day ${value}`;
                    },
                    interval: 13,
                    showMinLabel: true,
                    showMaxLabel: false,
                    color: '#3e465b',
                    align: 'left',
                    fontFamily: 'Nunito Sans',
                    fontWeight: 600,
                    fontSize: 12.8
                  },
                  axisLine: {
                    show: true,
                    lineStyle: {
                      color: '#525b75',
                      opacity: 0.5
                    }
                  },
                  axisTick: {
                    show: false
                  },
                  splitLine: {
                    show: true,
                    interval: 0,
                    lineStyle: {
                      color: '#525b75',
                      opacity: 0.3
                    }
                  },
                  boundaryGap: false
                },
                {
                  type: 'category',
                  position: 'bottom',
                  data: days,
                  axisLabel: {
                    formatter: function(value) {
                      return `Day ${value}`;
                    },
                    interval: 130,
                    showMaxLabel: true,
                    showMinLabel: false,
                    color: '#3e465b',
                    align: 'right',
                    fontFamily: 'Nunito Sans',
                    fontWeight: 600,
                    fontSize: 12.8
                  },
                  axisLine: {
                    show: false
                  },
                  axisTick: {
                    show: false
                  },
                  splitLine: {
                    show: false
                  },
                  boundaryGap: false
                }
              ],
              yAxis: {
                position: 'right',
                axisPointer: {
                  type: 'none'
                },
                axisTick: 'none',
                splitLine: {
                  show: false
                },
                axisLine: {
                  show: false
                },
                axisLabel: {
                  show: false
                }
              },
              series: [{
                  name: 'Approved',
                  type: 'line',
                  data: approved,
                  smooth: true,
                  showSymbol: false,
                  symbol: 'circle',
                },
                {
                  name: 'Denied',
                  type: 'line',
                  data: denied,
                  smooth: true,
                  lineStyle: {
                    type: 'dashed',
                    width: 1,
                    color: '#0097eb',
                    opacity: 0.5,
                  },
                  showSymbol: false,
                  symbol: 'circle',
                },
              ],
              grid: {
                right: 2,
                left: 5,
                bottom: '20px',
                top: '2%',
                containLabel: false
              }
            };

            // Set the options and render the chart
            lineChart.setOption(options);

            window.addEventListener('resize', function() {
              lineChart.resize();
            });
          }
        </script>
      </div>
    </div>
  </div>

  <div class="mx-n4 px-4 mx-lg-n6 px-lg-6 bg-body-emphasis pt-7 pb-3 border-y mb-6">
    <div id="all-staff" data-list='{"valueNames":["staff","type","startdate","returndate","department","reliefstaff","status"],"page":10,"pagination":true}'>
      <div class="mb-3">
        <h3 id="selected-month-label">Leave listed for all month</h3>
        <p class="text-body-tertiary lh-sm mb-0">Displaying all approved staff members time-off records monthly</p>
      </div>

      <div class="row align-items-end justify-content-between pb-4 g-3">

        <div class="col-12 col-md-auto">
          <div class="search-box">
            <form class="position-relative" data-bs-toggle="search" data-bs-display="static">
              <input class="form-control search-input search form-control-sm" type="search" placeholder="Search staffs" aria-label="Search" />
              <span class="fas fa-search search-box-icon"></span>
            </form>
          </div>
        </div>

        <div class="col-12 col-md-auto d-none">
          <a class="btn btn-primary my-auto me-2" role="button" href="/"><span class="fa-solid fa-plus me-2"></span>Add new staff</a>
        </div>

      </div>

      <div class="table-responsive ms-n1 ps-1 scrollbar">
        <table class="table fs-9 mb-0 border-top border-translucent">
          <thead>
            <tr>
              <th class="sort white-space-nowrap align-middle ps-0" scope="col" data-sort="staff" style="width:15%;">STAFF</th>
              <th class="sort align-middle ps-3" scope="col" data-sort="type" style="width:10%;">TYPE</th>
              <th class="sort align-middle ps-3" scope="col" data-sort="department" style="width:15%;">DEPARTMENT</th>
              <th class="sort align-middle ps-3" scope="col" data-sort="reliefstaff" style="width:15%;">RELIEF STAFF</th>
              <th class="sort align-middle text-center text-center ps-3" scope="col" data-sort="startdate" style="width:10%;">START DATE</th>
              <th class="sort align-middle text-center text-center ps-3" scope="col" data-sort="returndate" style="width:10%;">RETURN DATE</th>
              <th class="sort align-middle text-center text-center ps-3" scope="col" data-sort="status" style="width:5%;">STATUS</th>
              <th class="sort align-middle text-end" scope="col" style="width:5%;"></th>
            </tr>
          </thead>
          <tbody class="list" id="project-summary-table-body">
            <% if(allLeave && allLeave.length>0){ %>
            <% allLeave.forEach(leave => { %>

            <% 
            var statusApprovalColor = '';
            
                  if (leave.status == "pending"){
                      statusApprovalColor = 'info';
                  } else if(leave.status == "approved") {
                      statusApprovalColor = 'success';
                  } else if(leave.status == "denied" ||  leave.status == "cancelled") {
                      statusApprovalColor = 'danger';
                  }else if (leave.status == "invalid"){
                      statusApprovalColor = 'warning';
                  }else if (leave.status == "submitted"){
                      statusApprovalColor = 'info';
                  }   
            %>

            <% 
            function formatDate(inputDate) {
                if (!inputDate) {
                    return ""; // Return an empty string if inputDate is undefined or null
                }
        
                const dateObject = new Date(inputDate);
        
                if (isNaN(dateObject.getTime())) {
                    console.error("Invalid date format:", inputDate);
                    return ""; // Return an empty string for invalid dates
                }
        
                const day = String(dateObject.getDate()).padStart(2, '0');
                const month = String(dateObject.getMonth() + 1).padStart(2, '0');
                const year = dateObject.getFullYear();
        
                return `${day}/${month}/${year}`;
            }
            %>

            <tr class="position-static">
              <td class="align-middle text-body white-space-nowrap ps-0 staff">
                <% 
                const checkUser = allUser.find(check => check._id.toString() === leave.user.toString());
                %>
                <% if (checkUser) { %>
                <a class="mb-0 fw-bold fs-9 notranslate" href="/staff/details/<%= checkUser._id %>"><%= checkUser.fullname %></a>
                <% } else { %>
                <p class="mb-0 fs-9 fw-bold text-primary">User not found</p>
                <% } %>
              </td>

              <td class="align-middle white-space-nowrap position ps-3">
                <a class="mb-0 fs-9 fw-bold" href="/leave/details/<%= leave._id %> "><%= leave.type %></a>
              </td>

              <td class="align-middle department ps-3">
                <p class="mb-0 fs-9 text-body-highlight"><%= leave.department %></p>
              </td>

              <td class="align-middle text-body white-space-nowrap reliefstaff ps-3">
                <%
                let userReliefName;
                let userLink;

                if(leave.assignee[0] === undefined){
                  userReliefName = '-';
                  userLink = '#';
                }else{
                  const checkUserRelief = allUser.find(check => check._id.toString() === leave.assignee[0].toString());
                  if(checkUserRelief){
                    userReliefName = checkUserRelief.fullname;
                  userLink = '/staff/details/'+checkUserRelief._id;
                  }else{
                    userReliefName = '-';
                    userLink = '#';
                  }
                }
                
              %>
                <a class="mb-0 fs-9" href="<%= userLink %>"><%= userReliefName %></a>
              </td>

              <td class="align-middle white-space-nowrap text-center startdate ps-0">
                <p class="mb-0 fs-9 text-body" id="start-date"><%= formatDate(leave.date.start) %></p>
              </td>

              <td class="align-middle white-space-nowrap text-center returndate ps-0">
                <p class="mb-0 fs-9 text-body"><%= formatDate(leave.date.return) %></p>
              </td>

              <td class="align-middle white-space-nowrap text-center status">
                <span class="badge badge-phoenix fs-10 badge-phoenix-<%= statusApprovalColor %>"><%= leave.status %></span>
              </td>

              <td class="align-middle text-end white-space-nowrap pe-0">
                <div class="btn-reveal-trigger position-static">
                  <button class="btn btn-sm dropdown-toggle dropdown-caret-none transition-none btn-reveal fs-10" type="button" data-bs-toggle="dropdown" data-boundary="window" aria-haspopup="true" aria-expanded="false" data-bs-reference="parent"><span class="fas fa-ellipsis-h fs-10"></span></button>
                  <div class="dropdown-menu dropdown-menu-end py-2"><a class="dropdown-item" href="/leave/details/<%= leave._id %>">View</a><a class="dropdown-item d-none" href="#!">Export</a>
                    <div class="dropdown-divider d-none"></div><a class="dropdown-item d-none" href="#!">Edit</a>
                    <div class="dropdown-divider d-none"></div><a class="dropdown-item d-none text-danger" href="#!">Remove</a>
                  </div>
                </div>
              </td>

            </tr>
            <% }); %>
            <% }else { %>
            <tr class="position-static">
              <td class="mb-0 fs-9 text-body">
                <p>There is no user found in your department</p>
              </td>
            </tr>
            <% } %>
          </tbody>
        </table>
      </div>
      <div class="row align-items-center justify-content-between py-2 pe-0 fs-9">
        <div class="col-auto d-flex">
          <p class="mb-0 d-none d-sm-block me-3 fw-semibold text-body" data-list-info="data-list-info"></p><a class="fw-semibold no-loader" href="#!" data-list-view="*">View all<span class="fas fa-angle-right ms-1" data-fa-transform="down-1"></span></a><a class="fw-semibold d-none no-loader" href="#!" data-list-view="less">View Less<span class="fas fa-angle-right ms-1" data-fa-transform="down-1"></span></a>
        </div>
        <div class="col-auto d-flex">
          <button class="page-link" data-list-pagination="prev"><span class="fas fa-chevron-left"></span></button>
          <ul class="mb-0 pagination"></ul>
          <button class="page-link pe-0" data-list-pagination="next"><span class="fas fa-chevron-right"></span></button>
        </div>
      </div>
    </div>

  </div>

  <script>
    function formatDate(inputDate) {
      if (!inputDate) {
        return ""; // Return an empty string if inputDate is undefined or null
      }

      try {
        // Check if the inputDate is in the "DD/MM/YYYY" format
        const match = inputDate.match(/^(\d{2})\/(\d{2})\/(\d{4})$/);

        if (match) {
          const day = match[1];
          const month = match[2];
          const year = match[3];

          // Construct a new date string in the "MM/DD/YYYY" format
          inputDate = `${month}/${day}/${year}`;
        }

        const dateObject = new Date(inputDate);

        if (isNaN(dateObject.getTime())) {
          console.error("Invalid date format:", inputDate);
          return ""; // Return an empty string for invalid dates
        }

        const formattedDate = dateObject.toLocaleString('en-us', {
          year: 'numeric',
          month: '2-digit',
          day: '2-digit'
        });

        return formattedDate;
      } catch (error) {
        console.error("Error formatting date:", inputDate, error);
        return ""; // Return an empty string in case of an error
      }
    }

    function filterTable() {
      var selectedMonth = document.getElementById("select-month").value;
      var rows = document.getElementById("project-summary-table-body").getElementsByTagName("tr");

      document.getElementById("selected-month-label").textContent =
        `Leave listed for ${selectedMonth || "All"}`;

      for (var i = 0; i < rows.length; i++) {
        var currentRow = rows[i];
        var startDateCell = currentRow.querySelector("#start-date");

        if (!startDateCell) {
          console.error("Start date cell not found for row:", currentRow);
          continue;
        }

        var startDate = startDateCell.innerText.trim();

        if (!startDate) {
          console.error("Start date is empty for row:", currentRow);
          continue;
        }

        try {
          // Use the formatted date for comparison
          var formattedStartDate = formatDate(startDate);
          var dateObject = new Date(formattedStartDate);

          if (isNaN(dateObject.getTime())) {
            console.error("Invalid date format for row:", currentRow);
            continue;
          }
        } catch (error) {
          console.error("Error parsing date for row:", currentRow, error);
          continue;
        }

        if (dateObject.toLocaleString('en-us', {
            month: 'long'
          }) === selectedMonth) {
          currentRow.style.display = ""; // Show the row
        } else {
          currentRow.style.display = "none"; // Hide the row
        }
      }
    }
  </script>

</div>

<%- include('partials/private-footer.ejs') %>