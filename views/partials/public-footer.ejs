</main>
<!-- ===============================================-->
<!--    End of Main Content-->
<!-- ===============================================-->


<!-- ===============================================-->
<!--    JavaScripts-->
<!-- ===============================================-->
<script src="/vendors/popper/popper.min.js"></script>
<script src="/vendors/bootstrap/bootstrap.min.js"></script>
<script src="../../vendors/anchorjs/anchor.min.js"></script>
<script src="../../vendors/is/is.min.js"></script>
<script src="../../vendors/list.js/list.min.js"></script>
<script src="/vendors/fontawesome/all.min.js"></script>
<script src="/vendors/lodash/lodash.min.js"></script>
<script src="/vendors/feather-icons/feather.min.js"></script>
<script src="/assets/js/phoenix.js"></script>
<script src="/vendors/echarts/echarts.min.js"></script>
<script src="/assets/js/ecommerce-dashboard.js"></script>
<script src="/vendors/isotope-layout/isotope.pkgd.min.js"></script>
<script src="/vendors/isotope-packery/packery-mode.pkgd.min.js"></script>
<script src="/vendors/bigpicture/BigPicture.js"></script>
<script src="/vendors/lottie/lottie.min.js"></script>
<script src="/vendors/countup/countUp.umd.js"></script>
<script src="../../vendors/prism/prism.js"></script>
<script src="https://polyfill.io/v3/polyfill.min.js?features=window.scroll"></script>
<script src="https://maps.googleapis.com/maps/api/js?key=AIzaSyDbaQGvhe7Af-uOMJz68NWHnO34UjjE7Lo&callback=initMap" async></script>

<!-- jquery -->
<script src="https://code.jquery.com/jquery-3.7.1.min.js" integrity="sha256-/JqT3SQfawRcv/BIHPThkBvs0OEvtFFmqPF/lYI/Cxo=" crossorigin="anonymous"></script>
<!-- file uploader -->
<script src="/vendors/dropzone/dropzone.js"></script>
<!-- datepicker -->
<script src="/assets/js/flatpickr.js"></script>
<!-- swiper -->
<script src="/assets/vendors/swiper/swiper-bundle.min.js"></script>
<!-- google translate -->
<script type="text/javascript" src="//translate.google.com/translate_a/element.js?cb=googleTranslateElementInit"></script>
<!-- slick slider -->
<script type="text/javascript" src="//cdn.jsdelivr.net/npm/slick-carousel@1.8.1/slick/slick.min.js"></script>

<!-- javascript -->
<script>
  // button loading function
  $(document).ready(function() {
    $('.loading-button').on('click', function() {
      $('.loading-button').addClass('loading');
      $('.content-button').addClass('noshow');

      setTimeout(function() {
        $('.loading-button').removeClass('loading');
        $('.content-button').removeClass('noshow');
      }, 2500);
    });
  });
</script>

<script type="text/javascript">
  function googleTranslateElementInit() {
    new google.translate.TranslateElement({}, 'google_translate_element');
  }

  function changeLanguage(language) {
    var languageCode = document.getElementById(`language-${language}`).value;
    var selectField = document.querySelector("#google_translate_element select");

    if (selectField) {
      for (var i = 0; i < selectField.children.length; i++) {
        var option = selectField.children[i];
        if (option.value === languageCode) {
          selectField.selectedIndex = i;
          selectField.dispatchEvent(new Event('change', {
            bubbles: true
          }));
          break;
        }
      }
    } else {
      console.error('Select field not found');
    }

    // Toggle button visibility
    var btnMs = document.getElementById('btn-ms');
    var btnEn = document.getElementById('btn-en');
    var btnMsMobile = document.getElementById('btn-ms-mobile');
    var btnEnMobile = document.getElementById('btn-en-mobile');

    if (language === 'ms') {
      btnMs.classList.add('d-none');
      btnEn.classList.remove('d-none');

      btnMsMobile.classList.add('d-none');
      btnEnMobile.classList.remove('d-none');
    } else {
      btnEn.classList.add('d-none');
      btnMs.classList.remove('d-none');

      btnEnMobile.classList.add('d-none');
      btnMsMobile.classList.remove('d-none');
    }
  }
</script>

<!-- loading function -->

<!-- <script type="module">
  import * as THREE from 'three';

  let $wrap = document.getElementById('canvas');

  // Initialize variables
  let areaWidth = window.innerWidth,
    areaHeight = window.innerHeight,
    length = 30,
    radius = 5.6,
    rotatevalue = 0.035, // Normal rotation speed
    acceleratedValue = 0.15, // Faster rotation speed
    decelerationDuration = 2000, // Time for acceleration/deceleration (in ms)
    acceleration = 0,
    animatestep = 0,
    toend = false,
    pi2 = Math.PI * 2,
    group = new THREE.Group(),
    mesh,
    ringcover,
    ring,
    camera,
    scene,
    renderer,
    isAccelerating = true;

  // Custom curve class
  class CustomCurve extends THREE.Curve {
    getPoint(percent) {
      let x = length * Math.sin(pi2 * percent);
      let y = radius * Math.cos(pi2 * 3 * percent);
      let z, t;

      t = (percent % 0.25) / 0.25;
      t = (percent % 0.25) - (2 * (1 - t) * t * -0.0185 + t * t * 0.25);
      if (
        Math.floor(percent / 0.25) == 0 ||
        Math.floor(percent / 0.25) == 2
      ) {
        t *= -1;
      }
      z = radius * Math.sin(pi2 * 2 * (percent - t));

      return new THREE.Vector3(x, y, z);
    }
  }

  // Create camera, scene, and renderer
  function initializeScene() {
    camera = new THREE.PerspectiveCamera(65, areaWidth / areaHeight, 1, 10000);
    camera.position.z = 150;

    scene = new THREE.Scene();
    scene.add(group);

    // Create custom tube geometry
    mesh = new THREE.Mesh(
      new THREE.TubeGeometry(new CustomCurve(), 200, 1.1, 2, true),
      new THREE.MeshBasicMaterial({
        color: 0x3874ff
      })
    );
    group.add(mesh);

    // Create ring cover and ring
    ringcover = new THREE.Mesh(
      new THREE.PlaneGeometry(50, 15, 1),
      new THREE.MeshBasicMaterial({
        color: 0xffffff,
        opacity: 0,
        transparent: true,
      })
    );
    ringcover.position.x = length + 1;
    ringcover.rotation.y = Math.PI / 2;
    group.add(ringcover);

    ring = new THREE.Mesh(
      new THREE.RingGeometry(4.75, 5.55, 32),
      new THREE.MeshBasicMaterial({
        color: 0x3874ff,
        opacity: 0,
        transparent: true,
      })
    );
    ring.position.x = length + 1.1;
    ring.rotation.y = Math.PI / 2;
    group.add(ring);

    // Create fake shadow
    (function() {
      let plain, i;
      for (i = 0; i < 10; i++) {
        plain = new THREE.Mesh(
          new THREE.PlaneGeometry(length * 2 + 1, radius * 3, 1),
          new THREE.MeshBasicMaterial({
            color: 0xffffff,
            transparent: true,
            opacity: 0.13,
          })
        );
        plain.position.z = -2.5 + i * 0.5;
        group.add(plain);
      }
    })();

    // Setup renderer
    renderer = new THREE.WebGLRenderer({
      antialias: true
    });
    renderer.setPixelRatio(window.devicePixelRatio);
    renderer.setSize(areaWidth, areaHeight);
    renderer.setClearColor('#ffffff');

    $wrap.appendChild(renderer.domElement);
  }

  // Reset animation state
  function resetAnimation() {
    animatestep = 0; // Reset animation step
    isAccelerating = true; // Start with acceleration
    group.rotation.set(0, 0, 0); // Reset group rotation if necessary
    group.position.set(0, 0, 0); // Reset group position if necessary
  }

  // Resize event listener
  window.addEventListener('resize', () => {
    areaWidth = window.innerWidth;
    areaHeight = window.innerHeight;
    renderer.setSize(areaWidth, areaHeight);
    camera.aspect = areaWidth / areaHeight;
    camera.updateProjectionMatrix();
  });

  // Manage acceleration effect
  let accelerationTime = 0;

  function controlSpeed() {
    if (isAccelerating) {
      // Accelerate for 2 seconds
      accelerationTime += 16; // Approximate frame duration
      if (accelerationTime >= decelerationDuration) {
        isAccelerating = false;
      }
      return acceleratedValue;
    } else {
      // Decelerate back to normal speed
      accelerationTime -= 16;
      if (accelerationTime <= 0) {
        accelerationTime = 0;
      }
      return (
        rotatevalue +
        ((acceleratedValue - rotatevalue) * accelerationTime) /
        decelerationDuration
      );
    }
  }

  // Animation functions
  function render() {
    let progress;
    animatestep = Math.max(
      0,
      Math.min(240, toend ? animatestep + 1 : animatestep - 4)
    );
    acceleration = easing(animatestep, 0, 1, 240);

    if (acceleration > 0.35) {
      progress = (acceleration - 0.35) / 0.65;
      group.rotation.y = (-Math.PI / 2) * progress;
      group.position.z = 50 * progress;
      progress = Math.max(0, (acceleration - 0.97) / 0.03);
      mesh.material.opacity = 1 - progress;
      ringcover.material.opacity = ring.material.opacity = progress;
      ring.scale.x = ring.scale.y = 0.9 + 0.1 * progress;
    }

    renderer.render(scene, camera);
  }

  function animate() {
    let speed = controlSpeed();
    mesh.rotation.x += speed;
    render();
    requestAnimationFrame(animate);
  }

  function easing(t, b, c, d) {
    if ((t /= d / 2) < 1) return (c / 2) * t * t + b;
    return (c / 2) * ((t -= 2) * t * t + 2) + b;
  }

  // Start the animation loop
  initializeScene(); // Initialize the scene
  animate(); // Start the animation loop

  // Event listener for page navigation
  document.addEventListener('DOMContentLoaded', function() {
    // Reset animation on page load
    resetAnimation();
    // Rest of your event listener code...
  });
</script> -->

<!-- <script>
  function showLoader() {
    const wrap = document.getElementById('wrap');
    wrap.classList.remove('d-none'); // Show the loader
    wrap.classList.add('d-block'); // Set display to block

    // Keep the loader visible for at least 3 seconds
    setTimeout(() => {
      // Loader will remain until the page is fully loaded
    }, 3000);
  }

  // Event listener for links
  document.addEventListener('DOMContentLoaded', function() {
    // Attach event listener to all <a> tags
    const links = document.querySelectorAll('a');
    links.forEach((link) => {
      link.addEventListener('click', function(event) {
        showLoader(); // Show loader on link click
        // Delay navigation to allow the loader to display
        setTimeout(() => {
          window.location.href = link.href; // Navigate to the new page after 3 seconds
        }, 3000);
        event.preventDefault(); // Prevent the default link behavior
      });
    });

    // Attach event listener to all forms
    const forms = document.querySelectorAll('form');
    forms.forEach((form) => {
      form.addEventListener('submit', function(event) {
        showLoader(); // Show loader on form submission
        // Prevent the form submission to allow the loader to display
        event.preventDefault();
        // Simulate a delay before submitting the form
        setTimeout(() => {
          form.submit(); // Submit the form after 3 seconds
        }, 3000);
      });
    });
  });

  // Event listener to hide loader when the new page is fully loaded
  window.addEventListener('load', function() {
    const wrap = document.getElementById('wrap');
    wrap.classList.add('d-none'); // Hide the loader when the new page is fully loaded
  });
</script> -->

</body>

</html>