<%- include('partials/public-header') %>

<script>
  // take the root of the colour from css for echarts
  const style = getComputedStyle(document.body);
  const theme = {
    primary: style.getPropertyValue('--phoenix-primary'),
    secondary: style.getPropertyValue('--phoenix-secondary'),
    success: style.getPropertyValue('--phoenix-success'),
    info: style.getPropertyValue('--phoenix-info'),
    warning: style.getPropertyValue('--phoenix-warning'),
    danger: style.getPropertyValue('--phoenix-danger'),
    bg_primary_subtle: style.getPropertyValue('--phoenix-primary-bg-subtle'),
    tertiary: style.getPropertyPriority('--phoenix-tertiary-color'),
    light: style.getPropertyValue('--phoenix-light'),
    dark: style.getPropertyValue('--phoenix-dark'),
    secondary_subtle: style.getPropertyValue('--phoenix-secondary-border-subtle'),
    cyan: style.getPropertyValue('--phoenix-cyan'),
    gray_100: style.getPropertyValue('--phoenix-gray-100')

  };

  //   take css class color based on their property color/bg-colour for echarts
  function getColor(className, property) {
    var element = document.createElement('div');
    element.className = className;
    document.body.appendChild(element);

    var computedStyle = window.getComputedStyle(element);
    var color = computedStyle.getPropertyValue(property);

    document.body.removeChild(element);

    return color;
  }
</script>

<style>
  /* Custom colors */
  :root {
    --phoenix-blue: #3874ff;
    --phoenix-indigo: #6610f2;
    --phoenix-purple: #6f42c1;
    --phoenix-pink: #d63384;
    --phoenix-red: #ec1f00;
    --phoenix-orange: #e5780b;
    --phoenix-yellow: #ffc107;
    --phoenix-green: #25b003;
    --phoenix-teal: #20c997;
    --blur: 20px;
    --image: url('https://s3-us-west-2.amazonaws.com/s.cdpn.io/1376484/jess-harding-lqT6NAmTaiY-unsplash.jpg');
  }

  #glow-card {
    transition: background 0.8s ease-in-out;
  }

  .glow-wrapper-1 {
    /* No radius to affect card */
    /* Adjust padding to control glow width */
  }

  .glow-wrapper-1::before {
    content: '';
    background: linear-gradient(45deg,
        var(--phoenix-green),
        var(--phoenix-yellow),
        var(--phoenix-green));
    position: absolute;
    top: 0;
    left: 0;
    right: 0;
    bottom: 0;
    background-size: 400%;
    z-index: -1;
    filter: blur(15px);
    animation: glowing 20s linear infinite;
    border-radius: inherit;
  }

  .glow-wrapper-1 .card {
    position: relative;
    z-index: 1;
    /* Ensure card content is above the glow */
  }

  .glow-wrapper-2 {
    position: relative;
    display: inline-block;
    border-radius: 0;
    /* No radius to affect card */
    padding: 4px;
    /* Adjust padding to control glow width */
  }

  .glow-wrapper-2::before {
    content: '';
    background: linear-gradient(45deg,
        var(--phoenix-red),
        var(--phoenix-yellow),
        var(--phoenix-red));
    position: absolute;
    top: 0;
    left: 0;
    right: 0;
    bottom: 0;
    background-size: 400%;
    z-index: -1;
    filter: blur(20px);
    animation: glowing 20s linear infinite;
    border-radius: inherit;
  }

  .glow-wrapper-2 .card {
    position: relative;
    z-index: 1;
    /* Ensure card content is above the glow */
  }

  @keyframes glowing {
    0% {
      background-position: 0 0;
    }

    50% {
      background-position: 400% 0;
    }

    100% {
      background-position: 0 0;
    }
  }

  /* Full-page glass background effect */
  /* .glass-background {
    position: fixed;
    top: 0;
    left: 0;
    width: 100vw;
    height: 100vh;
    background-image: var(--image);
    background-size: cover;
    background-position: center;
    filter: blur(var(--blur));
    z-index: -5;
  } */

  :root {
    --diameter: 45vmax;
  }

  .glow-1 {
    position: absolute;
    width: .001vmin;
    height: .001vmin;
    border-radius: 50%;
    opacity: .25;
    box-shadow: 0 0 var(--diameter) var(--diameter) magenta;
    animation: hue 10s 0s linear infinite, move1 19s 0s linear infinite;
    z-index: -1;
  }

  .glow-2 {
    position: absolute;
    width: .001vmin;
    height: .001vmin;
    border-radius: 50%;
    opacity: .25;
    box-shadow: 0 0 var(--diameter) var(--diameter) white;
    animation: hue 15s 0s linear infinite, move2 25s 0s linear infinite;
    z-index: -1;
  }

  .glow-3 {
    position: absolute;
    width: .001vmin;
    height: .001vmin;
    border-radius: 50%;
    opacity: .2;
    box-shadow: 0 0 var(--diameter) var(--diameter) cyan;
    animation: hue 20s 0s linear infinite, move3 15s 0s linear infinite;
    z-index: -1;
  }

  @keyframes hue {
    0% {
      filter: hue-rotate(0deg);
    }

    100% {
      filter: hue-rotate(360deg);
    }
  }

  @keyframes move1 {
    0% {
      top: 0vh;
      left: 50vw;
    }

    25% {
      left: 0vw;
    }

    50% {
      top: 100vh;
    }

    75% {
      left: 100vw;
    }

    100% {
      top: 0vh;
      left: 50vw;
    }
  }

  @keyframes move2 {
    0% {
      top: 50vh;
      left: 100vw;
    }

    25% {
      top: 100vh;
    }

    50% {
      left: 0vw;
    }

    75% {
      top: 0vh;
    }

    100% {
      top: 50vh;
      left: 100vw;
    }
  }

  @keyframes move3 {
    0% {
      top: 100vh;
      left: 50vw;
    }

    25% {
      left: 100vw;
    }

    50% {
      top: 0vh;
    }

    75% {
      left: 0vw;
    }

    100% {
      top: 100vh;
      left: 50vw;
    }
  }
</style>

<!-- <div class="glow-1"></div>
<div class="glow-2"></div>
<div class="glow-3"></div> -->

<div class="d-lg-flex d-block justify-content-center align-items-center z-5 row g-0" style="min-height: 90vh;">

  <div class="col-12">
    <h1 class="fs-3 fs-md-3 fs-xxl-2 text-center mt-10"><span>Sun logo</span> Good Afternoon</h1>
  </div>

  <div class="py-5 px-2 px-xl-5 mb-0 order-xl-1 order-md-1 col-12 col-md-6">

    <div class="px-2 py-10">

      <div class="text-center" style="min-width: 25vw;">
        <h2 class="fs-3 fs-md-2 fs-xxl-1 fst-italic" id="currentTime"></h2>

        <script>
          function updateTime() {
            // Create a new Date object to get the current time
            var currentTime = new Date();

            // Get the hours, minutes, and seconds
            var hours = currentTime.getHours();
            var minutes = currentTime.getMinutes();
            var seconds = currentTime.getSeconds();

            // Add leading zeros if the numbers are less than 10
            hours = (hours < 10) ? '0' + hours : hours;
            minutes = (minutes < 10) ? '0' + minutes : minutes;
            seconds = (seconds < 10) ? '0' + seconds : seconds;

            // Construct the time string in HH:MM:SS format
            var timeString = hours + ':' + minutes + ':' + seconds + ' UTC+8';

            // Update the content of the <h3> element with the current time
            document.getElementById('currentTime').textContent = timeString;
          }

          // Call updateTime function initially to set the time immediately
          updateTime();

          // Update the time every second
          setInterval(updateTime, 1000);
        </script>
      </div>

      <div class="d-flex justify-content-center">
        <!-- <div class="text-center">
          <h2 id="dayName" class="fs-6 fs-md-6 fs-xxl-6 mb-3"></h2>

          <script>
            // Function to get the current day name based on Asia/Kuala_Lumpur timezone
            function updateDayName() {
              // Get the current date and time in Asia/Kuala_Lumpur timezone
              const today = new Date().toLocaleString("en-US", {
                timeZone: "Asia/Kuala_Lumpur"
              });

              // Create a new Date object with the localized time
              const localDate = new Date(today);

              // Create an array of day names
              const dayNames = ["Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday"];

              // Get the day name based on the localized day
              const dayName = dayNames[localDate.getDay()];

              // Display the day name in the <h2> element
              document.getElementById("dayName").textContent = dayName;
            }

            // Initial call to display the current day name
            updateDayName();

            // Set interval to refresh the day name every hour (3600000 milliseconds = 1 hour)
            setInterval(updateDayName, 3600000);
          </script>
        </div> -->

        <div class="text-center fst-italic">
          <h2 class="fs-6 fs-md-6 fs-xxl-6" id="current-date"></h2>
          <script>
            function getOrdinalSuffix(day) {
              if (day > 3 && day < 21) return 'th'; // Special case for 11th to 19th
              switch (day % 10) {
                case 1:
                  return 'st';
                case 2:
                  return 'nd';
                case 3:
                  return 'rd';
                default:
                  return 'th';
              }
            }

            function updateDate() {
              const now = new Date();

              // Get day and add ordinal suffix
              const day = now.getDate();
              const ordinalSuffix = getOrdinalSuffix(day);
              const formattedDay = `${day}${ordinalSuffix}`;

              // Get month and year
              const options = {
                month: 'long',
                year: 'numeric'
              };
              const formattedMonthYear = now.toLocaleDateString('en-US', options);

              // Combine the formatted day with month and year
              const formattedDate = `${formattedDay} ${formattedMonthYear}`;

              // Update the date in the DOM
              document.getElementById('current-date').innerText = formattedDate;
            }

            // Update the date initially
            updateDate();

            // Set an interval to update the date every hour
            setInterval(updateDate, 60 * 60 * 1000); // 60 minutes * 60 seconds * 1000 milliseconds
          </script>
        </div>
      </div>

    </div>

  </div>

  <div class="p-5 col-12 col-md-6">
    <div class="order-md-0">
      <div class="border border-5 rounded-5" style="min-height: 25vh;min-width: 45vw;">
        <div class="p-2">

          <div class="rounded-5" id="glow-card">
            <div class="p-3">
              <img id="qrCode" class="w-100 h-100">
            </div>
          </div>

          <script>
            document.addEventListener('DOMContentLoaded', function() {
              let previousQRData = null;

              async function updateQRCode() {
                try {
                  // Generate a new QR code
                  const response = await fetch('/api/qrcode/generate');
                  if (!response.ok) {
                    throw new Error('Network response was not ok');
                  }
                  const data = await response.json();

                  // Update the src attribute of the QR code image
                  document.getElementById('qrCode').src = data.qrCodeImage;

                  // Save the previous QR code data
                  if (previousQRData) {
                    await saveQRData(previousQRData);
                  }

                  // Update the previous QR data to the new one
                  previousQRData = data.uniqueIdentifier;

                  console.log('QR code updated successfully');
                } catch (error) {
                  console.error('Error updating QR code:', error);
                }
              }

              updateQRCode();
              setInterval(updateQRCode, 10000);

              async function saveQRData(qrData) {
                try {
                  // Perform any actions to save the QR code data here
                  // console.log('Saving QR code data:', qrData);

                  const response = await fetch('/api/qrcode/save-data', {
                    method: 'POST',
                    headers: {
                      'Content-Type': 'application/json'
                    },
                    body: JSON.stringify({
                      qrData: qrData
                    })
                  });

                  if (!response.ok) {
                    throw new Error('Network response was not ok');
                  }

                  // console.log('QR code data successfully saved');
                } catch (error) {
                  console.error('Error saving QR code data:', error);
                }
              }

              async function fetchLatestScannedData() {
                fetch('/api/qrcode/get-latest') // Fetch attendance data for today within a specific time range
                  .then(response => response.json())
                  .then(data => {
                    const glow = document.getElementById('glow-card');

                    if (data.temp === null) {
                      console.log('No data found');
                    } else {
                      // Check attendance type
                      if (data.temp.type === 'sign out') {
                        glow.classList.remove('glow-wrapper-1');
                        glow.classList.add('glow-wrapper-2');
                      } else {
                        glow.classList.remove('glow-wrapper-2');
                        glow.classList.add('glow-wrapper-1');
                      }

                      // Keep the glow effect for 2 seconds, then remove it
                      setTimeout(function() {
                        glow.classList.remove('glow-wrapper-1', 'glow-wrapper-2');
                      }, 4000); // Glow for 2 seconds
                    }
                  })
                  .catch(error => {
                    console.error('Error fetching latest scanned data:', error);
                  });
              }

              // Call the function to fetch latest scanned data immediately
              fetchLatestScannedData();

              // Set interval to fetch data every 4.5 seconds
              setInterval(fetchLatestScannedData, 4500);

            });
          </script>

        </div>
      </div>
    </div>
  </div>

</div>

<%- include('partials/public-footer') %>