<%- include('partials/public-header.ejs') %>

<style>
  #wrap {
    position: fixed; /* Change to fixed to cover the entire viewport */
    left: 0;
    top: 0;
    width: 100%; /* Full width */
    height: 100%; /* Full height */
    background-color: rgba(
      255,
      255,
      255,
      1
    ); /* Optional: semi-transparent background */
    display: flex; /* Center the loading text */
    align-items: center; /* Vertically center */
    justify-content: center; /* Horizontally center */
    z-index: 10;
  }
  #canvas {
    display: block;
  }
  .loading-text {
    animation: fade 2s infinite alternate; /* Fading effect */
    color: #007bff; /* Adjust loading text color if needed */
  }

  @keyframes fade {
    from {
      opacity: 1;
    }
    to {
      opacity: 0.5;
    }
  }
</style>

<script type="importmap">
  {
    "imports": {
      "three": "https://unpkg.com/three@0.162.0/build/three.module.js",
      "three/addons/": "https://unpkg.com/three@0.162.0/examples/jsm/"
    }
  }
</script>

<div class="mb-6">
  <h1>Testing loading page</h1>
  <a href="/testing" class="btn btn-primary">Test now</a>

  <div id="wrap" class="d-none">
    <!-- Initially hidden -->
    <div id="canvas" class="mx-auto text-center"></div>
  </div>

  <script type="module">
    import * as THREE from 'three';

    let $wrap = document.getElementById('canvas');

    // Initialize variables
    let areaWidth = window.innerWidth,
      areaHeight = window.innerHeight,
      length = 30,
      radius = 5.6,
      rotatevalue = 0.035, // Normal rotation speed
      acceleratedValue = 0.15, // Faster rotation speed
      decelerationDuration = 2000, // Time for acceleration/deceleration (in ms)
      acceleration = 0,
      animatestep = 0,
      toend = false,
      pi2 = Math.PI * 2,
      group = new THREE.Group(),
      mesh,
      ringcover,
      ring,
      camera,
      scene,
      renderer,
      isAccelerating = true;

    // Custom curve class
    class CustomCurve extends THREE.Curve {
      getPoint(percent) {
        let x = length * Math.sin(pi2 * percent);
        let y = radius * Math.cos(pi2 * 3 * percent);
        let z, t;

        t = (percent % 0.25) / 0.25;
        t = (percent % 0.25) - (2 * (1 - t) * t * -0.0185 + t * t * 0.25);
        if (
          Math.floor(percent / 0.25) == 0 ||
          Math.floor(percent / 0.25) == 2
        ) {
          t *= -1;
        }
        z = radius * Math.sin(pi2 * 2 * (percent - t));

        return new THREE.Vector3(x, y, z);
      }
    }

    // Create camera, scene, and renderer
    camera = new THREE.PerspectiveCamera(65, areaWidth / areaHeight, 1, 10000);
    camera.position.z = 150;

    scene = new THREE.Scene();
    scene.add(group);

    // Create custom tube geometry
    mesh = new THREE.Mesh(
      new THREE.TubeGeometry(new CustomCurve(), 200, 1.1, 2, true),
      new THREE.MeshBasicMaterial({ color: 0x3874ff })
    );
    group.add(mesh);

    // Create ring cover and ring
    ringcover = new THREE.Mesh(
      new THREE.PlaneGeometry(50, 15, 1),
      new THREE.MeshBasicMaterial({
        color: 0xffffff,
        opacity: 0,
        transparent: true,
      })
    );
    ringcover.position.x = length + 1;
    ringcover.rotation.y = Math.PI / 2;
    group.add(ringcover);

    ring = new THREE.Mesh(
      new THREE.RingGeometry(4.75, 5.55, 32),
      new THREE.MeshBasicMaterial({
        color: 0x3874ff,
        opacity: 0,
        transparent: true,
      })
    );
    ring.position.x = length + 1.1;
    ring.rotation.y = Math.PI / 2;
    group.add(ring);

    // Create fake shadow
    (function () {
      let plain, i;
      for (i = 0; i < 10; i++) {
        plain = new THREE.Mesh(
          new THREE.PlaneGeometry(length * 2 + 1, radius * 3, 1),
          new THREE.MeshBasicMaterial({
            color: 0xffffff,
            transparent: true,
            opacity: 0.13,
          })
        );
        plain.position.z = -2.5 + i * 0.5;
        group.add(plain);
      }
    })();

    // Setup renderer
    renderer = new THREE.WebGLRenderer({ antialias: true });
    renderer.setPixelRatio(window.devicePixelRatio);
    renderer.setSize(areaWidth, areaHeight);
    renderer.setClearColor('#ffffff');

    $wrap.appendChild(renderer.domElement);

    // Resize event listener
    window.addEventListener('resize', () => {
      areaWidth = window.innerWidth;
      areaHeight = window.innerHeight;
      renderer.setSize(areaWidth, areaHeight);
      camera.aspect = areaWidth / areaHeight;
      camera.updateProjectionMatrix();
    });

    // Manage acceleration effect
    let accelerationTime = 0;
    function controlSpeed() {
      if (isAccelerating) {
        // Accelerate for 2 seconds
        accelerationTime += 16; // Approximate frame duration
        if (accelerationTime >= decelerationDuration) {
          isAccelerating = false;
        }
        return acceleratedValue;
      } else {
        // Decelerate back to normal speed
        accelerationTime -= 16;
        if (accelerationTime <= 0) {
          accelerationTime = 0;
        }
        return (
          rotatevalue +
          ((acceleratedValue - rotatevalue) * accelerationTime) /
            decelerationDuration
        );
      }
    }

    // Animation functions
    function render() {
      let progress;
      animatestep = Math.max(
        0,
        Math.min(240, toend ? animatestep + 1 : animatestep - 4)
      );
      acceleration = easing(animatestep, 0, 1, 240);

      if (acceleration > 0.35) {
        progress = (acceleration - 0.35) / 0.65;
        group.rotation.y = (-Math.PI / 2) * progress;
        group.position.z = 50 * progress;
        progress = Math.max(0, (acceleration - 0.97) / 0.03);
        mesh.material.opacity = 1 - progress;
        ringcover.material.opacity = ring.material.opacity = progress;
        ring.scale.x = ring.scale.y = 0.9 + 0.1 * progress;
      }

      renderer.render(scene, camera);
    }

    function animate() {
      let speed = controlSpeed();
      mesh.rotation.x += speed;
      render();
      requestAnimationFrame(animate);
    }

    function easing(t, b, c, d) {
      if ((t /= d / 2) < 1) return (c / 2) * t * t + b;
      return (c / 2) * ((t -= 2) * t * t + 2) + b;
    }

    // Start the animation loop
    animate();
  </script>

  <script>
    function showLoader() {
      const wrap = document.getElementById('wrap');
      wrap.classList.remove('d-none'); // Show the loader
      wrap.classList.add('d-block'); // Set display to block

      // Keep the loader visible for at least 3 seconds
      setTimeout(() => {
        // Loader will remain until the page is fully loaded
      }, 3000);
    }

    // Event listener for links
    document.addEventListener('DOMContentLoaded', function () {
      // Attach event listener to all <a> tags
      const links = document.querySelectorAll('a');
      links.forEach((link) => {
        link.addEventListener('click', function (event) {
          showLoader(); // Show loader on link click
          // Delay navigation to allow the loader to display
          setTimeout(() => {
            window.location.href = link.href; // Navigate to the new page after 3 seconds
          }, 3000);
          event.preventDefault(); // Prevent the default link behavior
        });
      });

      // Attach event listener to all forms
      const forms = document.querySelectorAll('form');
      forms.forEach((form) => {
        form.addEventListener('submit', function (event) {
          showLoader(); // Show loader on form submission
          // Prevent the form submission to allow the loader to display
          event.preventDefault();
          // Simulate a delay before submitting the form
          setTimeout(() => {
            form.submit(); // Submit the form after 3 seconds
          }, 3000);
        });
      });
    });

    // Event listener to hide loader when the new page is fully loaded
    window.addEventListener('load', function () {
      const wrap = document.getElementById('wrap');
      wrap.classList.add('d-none'); // Hide the loader when the new page is fully loaded
    });
  </script>
</div>

<%- include('partials/public-footer.ejs') %>
